// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.

package cn.jhc.myexam.client.managed.request;
import cn.jhc.myexam.client.proxy.AttemptProxy;
import cn.jhc.myexam.client.proxy.BriefAnswerProxy;
import cn.jhc.myexam.client.proxy.CategoryProxy;
import cn.jhc.myexam.client.proxy.FillBlankProxy;
import cn.jhc.myexam.client.proxy.GlossaryProxy;
import cn.jhc.myexam.client.proxy.QuizProxy;
import cn.jhc.myexam.client.proxy.RoleProxy;
import cn.jhc.myexam.client.proxy.SingleChoiceProxy;
import cn.jhc.myexam.client.proxy.TrueOrFalseProxy;
import cn.jhc.myexam.client.proxy.UserProxy;
import com.google.web.bindery.requestfactory.shared.EntityProxy;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;

public abstract class ApplicationEntityTypesProcessor<T> {

    private final T defaultValue;

    private T result;

    public ApplicationEntityTypesProcessor() {
        defaultValue = null;
    }

    public ApplicationEntityTypesProcessor(T defaultValue) {
        this.defaultValue = defaultValue;
    }

    public static Set<Class<? extends com.google.web.bindery.requestfactory.shared.EntityProxy>> getAll() {
        Set<Class<? extends EntityProxy>> rtn = new HashSet<Class<? extends EntityProxy>>();
        rtn.add(AttemptProxy.class);
        rtn.add(BriefAnswerProxy.class);
        rtn.add(CategoryProxy.class);
        rtn.add(FillBlankProxy.class);
        rtn.add(GlossaryProxy.class);
        rtn.add(QuizProxy.class);
        rtn.add(RoleProxy.class);
        rtn.add(SingleChoiceProxy.class);
        rtn.add(TrueOrFalseProxy.class);
        rtn.add(UserProxy.class);
        return Collections.unmodifiableSet(rtn);
    }

    private static void process(ApplicationEntityTypesProcessor<?> processor, Class<?> clazz) {
        if (AttemptProxy.class.equals(clazz)) {
            processor.handleAttempt((AttemptProxy) null);
            return;
        }
        if (BriefAnswerProxy.class.equals(clazz)) {
            processor.handleBriefAnswer((BriefAnswerProxy) null);
            return;
        }
        if (CategoryProxy.class.equals(clazz)) {
            processor.handleCategory((CategoryProxy) null);
            return;
        }
        if (FillBlankProxy.class.equals(clazz)) {
            processor.handleFillBlank((FillBlankProxy) null);
            return;
        }
        if (GlossaryProxy.class.equals(clazz)) {
            processor.handleGlossary((GlossaryProxy) null);
            return;
        }
        if (QuizProxy.class.equals(clazz)) {
            processor.handleQuiz((QuizProxy) null);
            return;
        }
        if (RoleProxy.class.equals(clazz)) {
            processor.handleRole((RoleProxy) null);
            return;
        }
        if (SingleChoiceProxy.class.equals(clazz)) {
            processor.handleSingleChoice((SingleChoiceProxy) null);
            return;
        }
        if (TrueOrFalseProxy.class.equals(clazz)) {
            processor.handleTrueOrFalse((TrueOrFalseProxy) null);
            return;
        }
        if (UserProxy.class.equals(clazz)) {
            processor.handleUser((UserProxy) null);
            return;
        }
        processor.handleNonProxy(null);
    }

    private static void process(ApplicationEntityTypesProcessor<?> processor, Object proxy) {
        if (proxy instanceof AttemptProxy) {
            processor.handleAttempt((AttemptProxy) proxy);
            return;
        }
        if (proxy instanceof BriefAnswerProxy) {
            processor.handleBriefAnswer((BriefAnswerProxy) proxy);
            return;
        }
        if (proxy instanceof CategoryProxy) {
            processor.handleCategory((CategoryProxy) proxy);
            return;
        }
        if (proxy instanceof FillBlankProxy) {
            processor.handleFillBlank((FillBlankProxy) proxy);
            return;
        }
        if (proxy instanceof GlossaryProxy) {
            processor.handleGlossary((GlossaryProxy) proxy);
            return;
        }
        if (proxy instanceof QuizProxy) {
            processor.handleQuiz((QuizProxy) proxy);
            return;
        }
        if (proxy instanceof RoleProxy) {
            processor.handleRole((RoleProxy) proxy);
            return;
        }
        if (proxy instanceof SingleChoiceProxy) {
            processor.handleSingleChoice((SingleChoiceProxy) proxy);
            return;
        }
        if (proxy instanceof TrueOrFalseProxy) {
            processor.handleTrueOrFalse((TrueOrFalseProxy) proxy);
            return;
        }
        if (proxy instanceof UserProxy) {
            processor.handleUser((UserProxy) proxy);
            return;
        }
        processor.handleNonProxy(proxy);
    }

    public void handleNonProxy(Object object) {
    }

    public abstract void handleAttempt(AttemptProxy proxy);

    public abstract void handleBriefAnswer(BriefAnswerProxy proxy);

    public abstract void handleCategory(CategoryProxy proxy);

    public abstract void handleFillBlank(FillBlankProxy proxy);

    public abstract void handleGlossary(GlossaryProxy proxy);

    public abstract void handleQuiz(QuizProxy proxy);

    public abstract void handleRole(RoleProxy proxy);

    public abstract void handleSingleChoice(SingleChoiceProxy proxy);

    public abstract void handleTrueOrFalse(TrueOrFalseProxy proxy);

    public abstract void handleUser(UserProxy proxy);

    public T process(Class<?> clazz) {
        setResult(defaultValue);
        ApplicationEntityTypesProcessor.process(this, clazz);
        return result;
    }

    public T process(Object proxy) {
        setResult(defaultValue);
        ApplicationEntityTypesProcessor.process(this, proxy);
        return result;
    }

    protected void setResult(T result) {
        this.result = result;
    }
}

// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package cn.jhc.myexam.server.domain;

import cn.jhc.myexam.server.domain.BriefAnswer;
import cn.jhc.myexam.server.domain.BriefAnswerDataOnDemand;
import cn.jhc.myexam.server.domain.Category;
import cn.jhc.myexam.server.domain.CategoryDataOnDemand;
import cn.jhc.myexam.server.repository.BriefAnswerRepository;
import cn.jhc.myexam.server.service.BriefAnswerService;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect BriefAnswerDataOnDemand_Roo_DataOnDemand {
    
    declare @type: BriefAnswerDataOnDemand: @Component;
    
    private Random BriefAnswerDataOnDemand.rnd = new SecureRandom();
    
    private List<BriefAnswer> BriefAnswerDataOnDemand.data;
    
    @Autowired
    CategoryDataOnDemand BriefAnswerDataOnDemand.categoryDataOnDemand;
    
    @Autowired
    BriefAnswerService BriefAnswerDataOnDemand.briefAnswerService;
    
    @Autowired
    BriefAnswerRepository BriefAnswerDataOnDemand.briefAnswerRepository;
    
    public BriefAnswer BriefAnswerDataOnDemand.getNewTransientBriefAnswer(int index) {
        BriefAnswer obj = new BriefAnswer();
        setAnswer(obj, index);
        setCategory(obj, index);
        setQuestion(obj, index);
        setUploadFile(obj, index);
        return obj;
    }
    
    public void BriefAnswerDataOnDemand.setAnswer(BriefAnswer obj, int index) {
        String answer = "answer_" + index;
        if (answer.length() > 2048) {
            answer = answer.substring(0, 2048);
        }
        obj.setAnswer(answer);
    }
    
    public void BriefAnswerDataOnDemand.setCategory(BriefAnswer obj, int index) {
        Category category = categoryDataOnDemand.getRandomCategory();
        obj.setCategory(category);
    }
    
    public void BriefAnswerDataOnDemand.setQuestion(BriefAnswer obj, int index) {
        String question = "question_" + index;
        if (question.length() > 2048) {
            question = question.substring(0, 2048);
        }
        obj.setQuestion(question);
    }
    
    public void BriefAnswerDataOnDemand.setUploadFile(BriefAnswer obj, int index) {
        Boolean uploadFile = false;
        obj.setUploadFile(uploadFile);
    }
    
    public BriefAnswer BriefAnswerDataOnDemand.getSpecificBriefAnswer(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        BriefAnswer obj = data.get(index);
        Long id = obj.getId();
        return briefAnswerService.findBriefAnswer(id);
    }
    
    public BriefAnswer BriefAnswerDataOnDemand.getRandomBriefAnswer() {
        init();
        BriefAnswer obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return briefAnswerService.findBriefAnswer(id);
    }
    
    public boolean BriefAnswerDataOnDemand.modifyBriefAnswer(BriefAnswer obj) {
        return false;
    }
    
    public void BriefAnswerDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = briefAnswerService.findBriefAnswerEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'BriefAnswer' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<BriefAnswer>();
        for (int i = 0; i < 10; i++) {
            BriefAnswer obj = getNewTransientBriefAnswer(i);
            try {
                briefAnswerService.saveBriefAnswer(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            briefAnswerRepository.flush();
            data.add(obj);
        }
    }
    
}

// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package cn.jhc.myexam.server.domain;

import cn.jhc.myexam.server.domain.Attempt;
import cn.jhc.myexam.server.domain.AttemptDataOnDemand;
import cn.jhc.myexam.server.domain.QuizDataOnDemand;
import cn.jhc.myexam.server.domain.UserDataOnDemand;
import cn.jhc.myexam.server.repository.AttemptRepository;
import cn.jhc.myexam.server.service.AttemptService;
import cn.jhc.myexam.shared.domain.QuestionType;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect AttemptDataOnDemand_Roo_DataOnDemand {
    
    declare @type: AttemptDataOnDemand: @Component;
    
    private Random AttemptDataOnDemand.rnd = new SecureRandom();
    
    private List<Attempt> AttemptDataOnDemand.data;
    
    @Autowired
    QuizDataOnDemand AttemptDataOnDemand.quizDataOnDemand;
    
    @Autowired
    UserDataOnDemand AttemptDataOnDemand.userDataOnDemand;
    
    @Autowired
    AttemptService AttemptDataOnDemand.attemptService;
    
    @Autowired
    AttemptRepository AttemptDataOnDemand.attemptRepository;
    
    public Attempt AttemptDataOnDemand.getNewTransientAttempt(int index) {
        Attempt obj = new Attempt();
        setAnswer(obj, index);
        setQuestionId(obj, index);
        setQuestionType(obj, index);
        setSubmitDate(obj, index);
        return obj;
    }
    
    public void AttemptDataOnDemand.setAnswer(Attempt obj, int index) {
        String answer = "answer_" + index;
        if (answer.length() > 2048) {
            answer = answer.substring(0, 2048);
        }
        obj.setAnswer(answer);
    }
    
    public void AttemptDataOnDemand.setQuestionId(Attempt obj, int index) {
        Long questionId = new Integer(index).longValue();
        obj.setQuestionId(questionId);
    }
    
    public void AttemptDataOnDemand.setQuestionType(Attempt obj, int index) {
        QuestionType questionType = QuestionType.class.getEnumConstants()[0];
        obj.setQuestionType(questionType);
    }
    
    public void AttemptDataOnDemand.setSubmitDate(Attempt obj, int index) {
        Date submitDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setSubmitDate(submitDate);
    }
    
    public Attempt AttemptDataOnDemand.getSpecificAttempt(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Attempt obj = data.get(index);
        Long id = obj.getId();
        return attemptService.findAttempt(id);
    }
    
    public Attempt AttemptDataOnDemand.getRandomAttempt() {
        init();
        Attempt obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return attemptService.findAttempt(id);
    }
    
    public boolean AttemptDataOnDemand.modifyAttempt(Attempt obj) {
        return false;
    }
    
    public void AttemptDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = attemptService.findAttemptEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Attempt' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Attempt>();
        for (int i = 0; i < 10; i++) {
            Attempt obj = getNewTransientAttempt(i);
            try {
                attemptService.saveAttempt(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            attemptRepository.flush();
            data.add(obj);
        }
    }
    
}

// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package cn.jhc.myexam.server.domain;

import cn.jhc.myexam.server.domain.Category;
import cn.jhc.myexam.server.domain.CategoryDataOnDemand;
import cn.jhc.myexam.server.domain.Quiz;
import cn.jhc.myexam.server.domain.QuizDataOnDemand;
import cn.jhc.myexam.server.repository.QuizRepository;
import cn.jhc.myexam.server.service.QuizService;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect QuizDataOnDemand_Roo_DataOnDemand {
    
    declare @type: QuizDataOnDemand: @Component;
    
    private Random QuizDataOnDemand.rnd = new SecureRandom();
    
    private List<Quiz> QuizDataOnDemand.data;
    
    @Autowired
    CategoryDataOnDemand QuizDataOnDemand.categoryDataOnDemand;
    
    @Autowired
    QuizService QuizDataOnDemand.quizService;
    
    @Autowired
    QuizRepository QuizDataOnDemand.quizRepository;
    
    public Quiz QuizDataOnDemand.getNewTransientQuiz(int index) {
        Quiz obj = new Quiz();
        setCategory(obj, index);
        setContent(obj, index);
        setInfo(obj, index);
        setName(obj, index);
        setTimeClose(obj, index);
        setTimeOpen(obj, index);
        return obj;
    }
    
    public void QuizDataOnDemand.setCategory(Quiz obj, int index) {
        Category category = categoryDataOnDemand.getRandomCategory();
        obj.setCategory(category);
    }
    
    public void QuizDataOnDemand.setContent(Quiz obj, int index) {
        String content = "content_" + index;
        if (content.length() > 1024) {
            content = content.substring(0, 1024);
        }
        obj.setContent(content);
    }
    
    public void QuizDataOnDemand.setInfo(Quiz obj, int index) {
        String info = "info_" + index;
        if (info.length() > 2048) {
            info = info.substring(0, 2048);
        }
        obj.setInfo(info);
    }
    
    public void QuizDataOnDemand.setName(Quiz obj, int index) {
        String name = "name_" + index;
        if (name.length() > 1024) {
            name = name.substring(0, 1024);
        }
        obj.setName(name);
    }
    
    public void QuizDataOnDemand.setTimeClose(Quiz obj, int index) {
        Date timeClose = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setTimeClose(timeClose);
    }
    
    public void QuizDataOnDemand.setTimeOpen(Quiz obj, int index) {
        Date timeOpen = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setTimeOpen(timeOpen);
    }
    
    public Quiz QuizDataOnDemand.getSpecificQuiz(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Quiz obj = data.get(index);
        Long id = obj.getId();
        return quizService.findQuiz(id);
    }
    
    public Quiz QuizDataOnDemand.getRandomQuiz() {
        init();
        Quiz obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return quizService.findQuiz(id);
    }
    
    public boolean QuizDataOnDemand.modifyQuiz(Quiz obj) {
        return false;
    }
    
    public void QuizDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = quizService.findQuizEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Quiz' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Quiz>();
        for (int i = 0; i < 10; i++) {
            Quiz obj = getNewTransientQuiz(i);
            try {
                quizService.saveQuiz(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            quizRepository.flush();
            data.add(obj);
        }
    }
    
}

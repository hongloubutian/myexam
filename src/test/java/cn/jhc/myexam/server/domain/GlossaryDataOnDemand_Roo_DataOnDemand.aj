// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package cn.jhc.myexam.server.domain;

import cn.jhc.myexam.server.domain.Category;
import cn.jhc.myexam.server.domain.CategoryDataOnDemand;
import cn.jhc.myexam.server.domain.Glossary;
import cn.jhc.myexam.server.domain.GlossaryDataOnDemand;
import cn.jhc.myexam.server.repository.GlossaryRepository;
import cn.jhc.myexam.server.service.GlossaryService;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect GlossaryDataOnDemand_Roo_DataOnDemand {
    
    declare @type: GlossaryDataOnDemand: @Component;
    
    private Random GlossaryDataOnDemand.rnd = new SecureRandom();
    
    private List<Glossary> GlossaryDataOnDemand.data;
    
    @Autowired
    CategoryDataOnDemand GlossaryDataOnDemand.categoryDataOnDemand;
    
    @Autowired
    GlossaryService GlossaryDataOnDemand.glossaryService;
    
    @Autowired
    GlossaryRepository GlossaryDataOnDemand.glossaryRepository;
    
    public Glossary GlossaryDataOnDemand.getNewTransientGlossary(int index) {
        Glossary obj = new Glossary();
        setCategory(obj, index);
        setDefination(obj, index);
        setTerm(obj, index);
        return obj;
    }
    
    public void GlossaryDataOnDemand.setCategory(Glossary obj, int index) {
        Category category = categoryDataOnDemand.getRandomCategory();
        obj.setCategory(category);
    }
    
    public void GlossaryDataOnDemand.setDefination(Glossary obj, int index) {
        String defination = "defination_" + index;
        if (defination.length() > 2048) {
            defination = defination.substring(0, 2048);
        }
        obj.setDefination(defination);
    }
    
    public void GlossaryDataOnDemand.setTerm(Glossary obj, int index) {
        String term = "term_" + index;
        if (term.length() > 128) {
            term = term.substring(0, 128);
        }
        obj.setTerm(term);
    }
    
    public Glossary GlossaryDataOnDemand.getSpecificGlossary(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Glossary obj = data.get(index);
        Long id = obj.getId();
        return glossaryService.findGlossary(id);
    }
    
    public Glossary GlossaryDataOnDemand.getRandomGlossary() {
        init();
        Glossary obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return glossaryService.findGlossary(id);
    }
    
    public boolean GlossaryDataOnDemand.modifyGlossary(Glossary obj) {
        return false;
    }
    
    public void GlossaryDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = glossaryService.findGlossaryEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Glossary' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Glossary>();
        for (int i = 0; i < 10; i++) {
            Glossary obj = getNewTransientGlossary(i);
            try {
                glossaryService.saveGlossary(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            glossaryRepository.flush();
            data.add(obj);
        }
    }
    
}

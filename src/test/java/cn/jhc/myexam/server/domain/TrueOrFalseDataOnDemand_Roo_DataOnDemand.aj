// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package cn.jhc.myexam.server.domain;

import cn.jhc.myexam.server.domain.Category;
import cn.jhc.myexam.server.domain.CategoryDataOnDemand;
import cn.jhc.myexam.server.domain.TrueOrFalse;
import cn.jhc.myexam.server.domain.TrueOrFalseDataOnDemand;
import cn.jhc.myexam.server.repository.TrueOrFalseRepository;
import cn.jhc.myexam.server.service.TrueOrFalseService;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect TrueOrFalseDataOnDemand_Roo_DataOnDemand {
    
    declare @type: TrueOrFalseDataOnDemand: @Component;
    
    private Random TrueOrFalseDataOnDemand.rnd = new SecureRandom();
    
    private List<TrueOrFalse> TrueOrFalseDataOnDemand.data;
    
    @Autowired
    CategoryDataOnDemand TrueOrFalseDataOnDemand.categoryDataOnDemand;
    
    @Autowired
    TrueOrFalseService TrueOrFalseDataOnDemand.trueOrFalseService;
    
    @Autowired
    TrueOrFalseRepository TrueOrFalseDataOnDemand.trueOrFalseRepository;
    
    public TrueOrFalse TrueOrFalseDataOnDemand.getNewTransientTrueOrFalse(int index) {
        TrueOrFalse obj = new TrueOrFalse();
        setAnswer(obj, index);
        setCategory(obj, index);
        setQuestion(obj, index);
        return obj;
    }
    
    public void TrueOrFalseDataOnDemand.setAnswer(TrueOrFalse obj, int index) {
        Boolean answer = Boolean.TRUE;
        obj.setAnswer(answer);
    }
    
    public void TrueOrFalseDataOnDemand.setCategory(TrueOrFalse obj, int index) {
        Category category = categoryDataOnDemand.getRandomCategory();
        obj.setCategory(category);
    }
    
    public void TrueOrFalseDataOnDemand.setQuestion(TrueOrFalse obj, int index) {
        String question = "question_" + index;
        if (question.length() > 2048) {
            question = question.substring(0, 2048);
        }
        obj.setQuestion(question);
    }
    
    public TrueOrFalse TrueOrFalseDataOnDemand.getSpecificTrueOrFalse(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        TrueOrFalse obj = data.get(index);
        Long id = obj.getId();
        return trueOrFalseService.findTrueOrFalse(id);
    }
    
    public TrueOrFalse TrueOrFalseDataOnDemand.getRandomTrueOrFalse() {
        init();
        TrueOrFalse obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return trueOrFalseService.findTrueOrFalse(id);
    }
    
    public boolean TrueOrFalseDataOnDemand.modifyTrueOrFalse(TrueOrFalse obj) {
        return false;
    }
    
    public void TrueOrFalseDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = trueOrFalseService.findTrueOrFalseEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'TrueOrFalse' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<TrueOrFalse>();
        for (int i = 0; i < 10; i++) {
            TrueOrFalse obj = getNewTransientTrueOrFalse(i);
            try {
                trueOrFalseService.saveTrueOrFalse(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            trueOrFalseRepository.flush();
            data.add(obj);
        }
    }
    
}

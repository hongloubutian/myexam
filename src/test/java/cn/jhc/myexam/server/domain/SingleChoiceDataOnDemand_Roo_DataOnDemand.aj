// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package cn.jhc.myexam.server.domain;

import cn.jhc.myexam.server.domain.Category;
import cn.jhc.myexam.server.domain.CategoryDataOnDemand;
import cn.jhc.myexam.server.domain.SingleChoice;
import cn.jhc.myexam.server.domain.SingleChoiceDataOnDemand;
import cn.jhc.myexam.server.repository.SingleChoiceRepository;
import cn.jhc.myexam.server.service.SingleChoiceService;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect SingleChoiceDataOnDemand_Roo_DataOnDemand {
    
    declare @type: SingleChoiceDataOnDemand: @Component;
    
    private Random SingleChoiceDataOnDemand.rnd = new SecureRandom();
    
    private List<SingleChoice> SingleChoiceDataOnDemand.data;
    
    @Autowired
    CategoryDataOnDemand SingleChoiceDataOnDemand.categoryDataOnDemand;
    
    @Autowired
    SingleChoiceService SingleChoiceDataOnDemand.singleChoiceService;
    
    @Autowired
    SingleChoiceRepository SingleChoiceDataOnDemand.singleChoiceRepository;
    
    public SingleChoice SingleChoiceDataOnDemand.getNewTransientSingleChoice(int index) {
        SingleChoice obj = new SingleChoice();
        setAnswer(obj, index);
        setCategory(obj, index);
        setOptionA(obj, index);
        setOptionB(obj, index);
        setOptionC(obj, index);
        setOptionD(obj, index);
        setQuestion(obj, index);
        return obj;
    }
    
    public void SingleChoiceDataOnDemand.setAnswer(SingleChoice obj, int index) {
        String answer = String.valueOf(index);
        if (answer.length() > 1) {
            answer = answer.substring(0, 1);
        }
        obj.setAnswer(answer);
    }
    
    public void SingleChoiceDataOnDemand.setCategory(SingleChoice obj, int index) {
        Category category = categoryDataOnDemand.getRandomCategory();
        obj.setCategory(category);
    }
    
    public void SingleChoiceDataOnDemand.setOptionA(SingleChoice obj, int index) {
        String optionA = "optionA_" + index;
        if (optionA.length() > 2048) {
            optionA = optionA.substring(0, 2048);
        }
        obj.setOptionA(optionA);
    }
    
    public void SingleChoiceDataOnDemand.setOptionB(SingleChoice obj, int index) {
        String optionB = "optionB_" + index;
        if (optionB.length() > 2048) {
            optionB = optionB.substring(0, 2048);
        }
        obj.setOptionB(optionB);
    }
    
    public void SingleChoiceDataOnDemand.setOptionC(SingleChoice obj, int index) {
        String optionC = "optionC_" + index;
        if (optionC.length() > 2048) {
            optionC = optionC.substring(0, 2048);
        }
        obj.setOptionC(optionC);
    }
    
    public void SingleChoiceDataOnDemand.setOptionD(SingleChoice obj, int index) {
        String optionD = "optionD_" + index;
        if (optionD.length() > 2048) {
            optionD = optionD.substring(0, 2048);
        }
        obj.setOptionD(optionD);
    }
    
    public void SingleChoiceDataOnDemand.setQuestion(SingleChoice obj, int index) {
        String question = "question_" + index;
        if (question.length() > 2048) {
            question = question.substring(0, 2048);
        }
        obj.setQuestion(question);
    }
    
    public SingleChoice SingleChoiceDataOnDemand.getSpecificSingleChoice(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        SingleChoice obj = data.get(index);
        Long id = obj.getId();
        return singleChoiceService.findSingleChoice(id);
    }
    
    public SingleChoice SingleChoiceDataOnDemand.getRandomSingleChoice() {
        init();
        SingleChoice obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return singleChoiceService.findSingleChoice(id);
    }
    
    public boolean SingleChoiceDataOnDemand.modifySingleChoice(SingleChoice obj) {
        return false;
    }
    
    public void SingleChoiceDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = singleChoiceService.findSingleChoiceEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'SINGLE_CHOICE' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<SingleChoice>();
        for (int i = 0; i < 10; i++) {
            SingleChoice obj = getNewTransientSingleChoice(i);
            try {
                singleChoiceService.saveSingleChoice(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            singleChoiceRepository.flush();
            data.add(obj);
        }
    }
    
}
